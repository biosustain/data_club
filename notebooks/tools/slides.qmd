---
title: Useful Software tools for data science
subtitle: Data club episode 4
format:
  revealjs:
    theme: default
    margin: 0.1
    embed-resources: true
    code-line-numbers: false
    center: false
---

# Introduction 

## Recap 

We are building a data science product together.

Month | Topic
----- | --------
March | Data literacy
May   | Data wrangling with pandas
July  | Visualisation with matplotlib
**September** | **Tools**
November | Publicly available data and databases
December | Analytics

## Today's plan

Discuss some software tools that can make your life easier when doing data
science with Python.

- Templates
- Environment/dependency management
- Linting
- Dashboards

## These tools are very important, but we won't cover them!

- editor, IDE, LSP 
- shell, tmux, ssh
- testing, test orchestration
- git, git workflows, social networks for git repos
- debuggers
- containers

# Templates

It is usually better to start with a template than from scratch.

There are lots of good templates online.

You can also write your own!

## Cookiecutter

[cookiecutter](https://pypi.org/project/cookiecutter/) is an application that
lets you easily download a custom template to start your project with.

Installation:

```{.sh}
(venv) > pip install cookiecutter
```

Cli:

```{.sh}
(venv) > cookiecutter https://url/of/online/cookiecutter/template
(venv) > cookiecutter my-local-cookiecutter-template
```

Python interface:

```{.python} 
from cookiecutter.main import cookiecutter
cookiecutter('my-local-cookiecutter-template')
```

## Some useful templates

[cookiecutter-data-science](https://github.com/drivendata/cookiecutter-data-science)
is a skeleton data science project.

[cookiecutter-hypermodern-python](https://github.com/cjolowicz/cookiecutter-hypermodern-python)
is a template for a Python package that uses recent tooling and conventions. 

[cookiecutter-pypackage](https://github.com/audreyfeldroy/cookiecutter-pypackage)
is a more traditional Python package template.

[cookiecutter-cms](https://github.com/MolSSI/cookiecutter-cms) is a template
that specifically targets computational molecuar science

[bibat](https://bibat.readthedocs.io/en/latest/) is a template for Bayesian
statistical analysis projects.

# Environments and dependencies

This is a big sore point in the Python world: none of the options are perfect!

## Useful Python environment and dependency management tools

[pyenv](https://github.com/pyenv/pyenv) is useful for installing and managing
Python versions.

[venv](https://docs.python.org/3/library/venv.html) is Python's built-in tool
for virtual environments.

[poetry](https://python-poetry.org/),
[pipenv](https://pipenv.pypa.io/en/latest/) and
[pdm](https://pdm.fming.dev/latest/) are Python dependency managers.

[conda](https://docs.conda.io/en/latest/) is a package management system that
aims to address all your scientific programming needs, in Python and beyond.

[pixi](https://prefix.dev/docs/pixi/overview) is a new alternative interface
for installing conda packages (and soon also packages from PyPI).

# Code checkers and formatters

An easy way to dramatically improve your and your collaborators' lives!

## Some useful Python code checkers and formatters

[isort](https://pre-commit.com/) checks that your Python imports are idiomatic.

[ruff](https://beta.ruff.rs/docs/) checks for and can sometimes correct common
Python mistakes.

[black](https://github.com/psf/black) formats your code: never worry about
indentation again!

[pre-commit](https://pre-commit.com/) runs your checkers and formatters as
pre-commit hooks.

# Documentation

## Some tools for documenting your Python project

[Sphinx](https://www.sphinx-doc.org/en/master/) is the de facto standard for
generating Python documentation from source code docstrings.

[MyST](https://myst-parser.readthedocs.io/en/v0.15.1/sphinx/intro.html) lets
you write Sphinx documentation in Markdown instead of reStructuredText.

[readthedocs](https://about.readthedocs.com/?ref=readthedocs.org) builds and
hosts your documentation for free.

# Dashboarding

For sharing the results of your analysis, a tiny interactive webapp is often
the best choice.

## Streamlit

[Streamlit](https://streamlit.io/) makes it easy to share data science work
online using a minimal, script-oriented Python webapp framework.

Best feature: Streamlit will deploy and host your webapp for free.

Try it yourself:

```{.sh} 
(venv) > pip install streamlit
(venv) > streamlit hello
```

Check out the [example](ADD LINK)

